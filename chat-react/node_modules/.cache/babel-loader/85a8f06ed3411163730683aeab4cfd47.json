{"ast":null,"code":"var _jsxFileName = \"/home/aswin/Desktop/Projects/chat-mern/chat-react/src/Components/ChatScreen/Chat.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Message from './Message';\nimport { ChatState } from '../../ChatProvideContext';\nimport UpdateGroup from './UpdateGroup';\nimport io from \"socket.io-client\";\nimport { MdSegment, MdSend } from 'react-icons/md';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000\";\nvar socket, selectedChatCompare;\n\nfunction Chat() {\n  _s();\n\n  const {\n    selectedChat,\n    user,\n    setNotification,\n    notification,\n    setSelectedChat,\n    setGroupButton,\n    groupButton,\n    fetching,\n    setFetching\n  } = ChatState();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const scrollerRef = useRef(null);\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      console.log('failed to load messages', error);\n    }\n  }; //   console.log(messages);\n\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 2000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    socket.emit(\"stop typing\", selectedChat._id);\n    console.log(newMessage);\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setNewMessage(\"\");\n      const {\n        data\n      } = await axios.post('/message', {\n        content: newMessage,\n        chatId: selectedChat\n      }, config);\n      socket.emit(\"new message\", data);\n      setMessages([...messages, data]);\n    } catch (error) {\n      console.log('failed to send message', error);\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false)); // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n  useEffect(() => {\n    var _scrollerRef$current;\n\n    (_scrollerRef$current = scrollerRef.current) === null || _scrollerRef$current === void 0 ? void 0 : _scrollerRef$current.scrollIntoView();\n  }, [messages]);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      console.log(newMessageRecieved);\n\n      if (!selectedChatCompare || // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetching(!fetching);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  console.log(selectedChat);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: ` sm:p-5 md:p-7 lg:p-10 h-screen overflow-x-hidden z-30 md:flex-grow w-full max-w-screen-2xl  md:flex ${selectedChat ? \"flex\" : \"none\"} `,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sm:rounded-lg w-full z-40 p-3 relative flex flex-col bg-emerald-100/10 backdrop-blur-lg backdrop-filter bg-clip-padding shadow-lg bg-opacity-30 h-full\",\n      children: [selectedChat.isGroupChat && /*#__PURE__*/_jsxDEV(UpdateGroup, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" rounded-lg  px-10 py-5 bg-gradient-to-l from-green-400/50 to-lime-500/50 flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: selectedChat.isGroupChat ? selectedChat.chatName : selectedChat.users.map(u => {\n            if (u.email !== user.email) return u.name;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setGroupButton(true),\n            children: /*#__PURE__*/_jsxDEV(MdSegment, {\n              size: 30,\n              className: \"text-green-300\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-col px-3 flex-1 overflow-x-scroll align-text-bottom \",\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chatList\",\n        className: \"flex  flex-col px-3 py-3 my-1 flex-1 overflow-x-scroll align-text-bottom \",\n        children: [messages === null || messages === void 0 ? void 0 : messages.map((m, i) => /*#__PURE__*/_jsxDEV(Message, {\n          message: m\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 20\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: scrollerRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }, this), isTyping && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"typing..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-7 py-5 mt-2 bottom-10 bg-gradient-to-l rounded-lg from-green-400/50 to-lime-500/50 text-right\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: sendMessage,\n          className: \"flex h-full\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gradient-to-r from-green-400/50 to-lime-400/50 p-1 rounded-2xl w-full mr-1 \",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: newMessage,\n              onChange: typingHandler,\n              className: \"w-full h-full outline-none bg-white px-5  fex flex-grow rounded-2xl \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"rounded-xl bg-teal-400 p-2 \",\n            children: /*#__PURE__*/_jsxDEV(MdSend, {\n              className: \"text-white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 85\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"TSjdhQiwgPAwxAFM17hpsXgMhRs=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/aswin/Desktop/Projects/chat-mern/chat-react/src/Components/ChatScreen/Chat.js"],"names":["axios","React","useEffect","useRef","useState","Message","ChatState","UpdateGroup","io","MdSegment","MdSend","ENDPOINT","socket","selectedChatCompare","Chat","selectedChat","user","setNotification","notification","setSelectedChat","setGroupButton","groupButton","fetching","setFetching","messages","setMessages","newMessage","setNewMessage","loading","setLoading","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","scrollerRef","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","console","log","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","sendMessage","preventDefault","post","content","chatId","on","current","scrollIntoView","newMessageRecieved","chat","includes","isGroupChat","chatName","users","map","u","email","name","m","i"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react'\n\nimport Message from './Message'\nimport { ChatState } from '../../ChatProvideContext';\nimport UpdateGroup from './UpdateGroup';\nimport io from \"socket.io-client\";\nimport { MdSegment, MdSend } from 'react-icons/md';\n\nconst ENDPOINT=\"http://localhost:9000\"\nvar socket,selectedChatCompare\n\nfunction Chat() {\n    const { selectedChat,user,setNotification,notification,\n      setSelectedChat,setGroupButton,groupButton ,fetching,setFetching} = ChatState();\n    const [messages,setMessages]=useState([])\n    const [newMessage,setNewMessage]=useState('')\n    const [loading,setLoading]=useState(false)\n    const [socketConnected, setSocketConnected] = useState(false);\n    const [typing, setTyping] = useState(false);\n    const [isTyping, setIsTyping] = useState(false);\n   \n    \n    const scrollerRef = useRef(null)\n    \n    \n    \n    \n    \n\n    const fetchMessages = async () => {\n        if (!selectedChat) return;\n    \n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n            },\n          };\n          setLoading(true);\n          const { data } = await axios.get(\n            `/message/${selectedChat._id}`,\n            config\n          );\n          setMessages(data);\n          setLoading(false);\n          socket.emit(\"join chat\", selectedChat._id);\n        } catch (error) {\n          console.log('failed to load messages',error);\n        }\n      };\n    //   console.log(messages);\n    const typingHandler = (e) => {\n        setNewMessage(e.target.value);\n        if (!socketConnected) return;\n    \n        if (!typing) {\n          setTyping(true);\n          socket.emit(\"typing\", selectedChat._id);\n        }\n        let lastTypingTime = new Date().getTime();\n        var timerLength = 2000;\n        setTimeout(() => {\n          var timeNow = new Date().getTime();\n          var timeDiff = timeNow - lastTypingTime;\n          if (timeDiff >= timerLength && typing) {\n            socket.emit(\"stop typing\", selectedChat._id);\n            setTyping(false);\n          }\n        }, timerLength);\n    }\n     \n      const sendMessage = async (e) => {\n          e.preventDefault();\n          socket.emit(\"stop typing\", selectedChat._id);\n        console.log(newMessage);\n          try {\n            const config = {\n              headers: {\n                \"Content-type\": \"application/json\",\n                Authorization: `Bearer ${user.token}`,\n              },\n            };\n            setNewMessage(\"\");\n            const { data } = await axios.post(\n              '/message',\n              {\n                content: newMessage,\n                chatId: selectedChat,\n              },\n              config\n            );\n            socket.emit(\"new message\", data);\n        \n            setMessages([...messages, data]);\n          } catch (error) {\n            console.log('failed to send message',error);\n        }\n      };\n      useEffect(() => {\n        socket = io(ENDPOINT);\n        socket.emit(\"setup\", user);\n        socket.on(\"connected\", () => setSocketConnected(true));\n        socket.on(\"typing\", () => setIsTyping(true));\n        socket.on(\"stop typing\", () => setIsTyping(false));\n        // eslint-disable-next-line\n      }, []);\n\n      useEffect(() => {\n        fetchMessages();\n        selectedChatCompare=selectedChat\n      }, [selectedChat]);\n      useEffect(() => {\n        scrollerRef.current?.scrollIntoView() \n      },[messages]);\n\n      useEffect(() => {\n        socket.on(\"message recieved\", (newMessageRecieved) => {\n          console.log(newMessageRecieved);\n          if (\n            !selectedChatCompare || // if chat is not selected or doesn't match current chat\n            selectedChatCompare._id !== newMessageRecieved.chat._id\n          ) \n          {\n            if (!notification.includes(newMessageRecieved)) {\n              setNotification([newMessageRecieved, ...notification]);\n              setFetching(!fetching);\n            }\n          } \n          else {\n            setMessages([...messages, newMessageRecieved]);\n          }\n        });\n      }); \n      console.log(selectedChat);\n    \n\n    return (\n    <div className={` sm:p-5 md:p-7 lg:p-10 h-screen overflow-x-hidden z-30 md:flex-grow w-full max-w-screen-2xl  md:flex ${selectedChat?\"flex\":\"none\"} `}>\n        <div className=\"sm:rounded-lg w-full z-40 p-3 relative flex flex-col bg-emerald-100/10 backdrop-blur-lg backdrop-filter bg-clip-padding shadow-lg bg-opacity-30 h-full\">\n            {selectedChat.isGroupChat && <UpdateGroup/>}\n            <div className=\" rounded-lg  px-10 py-5 bg-gradient-to-l from-green-400/50 to-lime-500/50 flex\">\n                <h1>{selectedChat.isGroupChat ? selectedChat.chatName : (selectedChat.users.map(u=>{if(u.email!==user.email) return u.name}))}</h1>\n                <div className=\"ml-auto\">\n                    <button onClick={()=>setGroupButton(true)}><MdSegment size={30} className=\"text-green-300\"/></button>    \n                </div>\n            </div>\n            {loading?<div className=\"flex-col px-3 flex-1 overflow-x-scroll align-text-bottom \">loading...</div>\n            :\n            <div id=\"chatList\" className=\"flex  flex-col px-3 py-3 my-1 flex-1 overflow-x-scroll align-text-bottom \">                \n                {messages?.map((m,i)=>\n                   <Message message={m}/>\n                )}\n                <div ref={scrollerRef} />\n            </div>}\n            {isTyping && <p>typing..</p>}\n            <div className=\"px-7 py-5 mt-2 bottom-10 bg-gradient-to-l rounded-lg from-green-400/50 to-lime-500/50 text-right\">\n                <form onSubmit={sendMessage} className=\"flex h-full\" >\n                  <div className=\"bg-gradient-to-r from-green-400/50 to-lime-400/50 p-1 rounded-2xl w-full mr-1 \">\n                    <input type='text' value={newMessage}  onChange={typingHandler}  className='w-full h-full outline-none bg-white px-5  fex flex-grow rounded-2xl ' />\n                  </div>\n                    <button type='submit'   className='rounded-xl bg-teal-400 p-2 '><MdSend className='text-white'/></button>\n                </form>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}