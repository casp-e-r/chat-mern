{"ast":null,"code":"var _jsxFileName = \"/home/aswin/Desktop/Projects/chat-mern/chat-react/src/Components/ChatScreen/Chat.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Message from './Message';\nimport { ChatState } from '../../ChatProvideContext';\nimport UpdateGroup from './UpdateGroup';\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000\";\nvar socket, selectedChatCompare;\n\nfunction Chat() {\n  _s();\n\n  const {\n    selectedChat,\n    user,\n    setSelectedChat,\n    setGroupButton,\n    groupButton\n  } = ChatState();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [socketConnected, setSocketConnected] = useState(false);\n\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n  };\n\n  const ref = useRef();\n\n  const scrollToBottom = () => {\n    var _ref$current;\n\n    (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.scrollIntoView({\n      behavior: \"auto\"\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false); //   socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      console.log('failed to load messages', error);\n    }\n  }; //   console.log(messages);\n\n\n  const sendMessage = async e => {\n    e.preventDefault(); //   socket.emit(\"stop typing\", selectedChat._id);\n\n    console.log(newMessage);\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setNewMessage(\"\");\n      const {\n        data\n      } = await axios.post('/message', {\n        content: newMessage,\n        chatId: selectedChat\n      }, config); // socket.emit(\"new message\", data);\n\n      setMessages([...messages, data]);\n    } catch (error) {\n      console.log('failed to send message', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchMessages();\n  }, [selectedChat]); // if (!socketConnected) return;\n  // if (!typing) {\n  //   setTyping(true);\n  //   socket.emit(\"typing\", selectedChat._id);\n  // }\n  // let lastTypingTime = new Date().getTime();\n  // var timerLength = 3000;\n  // setTimeout(() => {\n  //   var timeNow = new Date().getTime();\n  //   var timeDiff = timeNow - lastTypingTime;\n  //   if (timeDiff >= timerLength && typing) {\n  //     socket.emit(\"stop typing\", selectedChat._id);\n  //     setTyping(false);\n  //   }\n  // }, timerLength);\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connection\", () => setSocketConnected(true));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `  sm:p-5 md:p-10 h-screen overflow-x-hidden z-30 md:flex-grow w-full max-w-screen-2xl  md:flex ${selectedChat ? \"flex\" : \"none\"} `,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sm:rounded-3xl w-full z-40 p-3 relative flex flex-col bg-emerald-100 bg-opacity-90 h-full\",\n      children: [/*#__PURE__*/_jsxDEV(UpdateGroup, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" rounded-3xl  px-10 py-5 bg-white flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: selectedChat.chatName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setGroupButton(true),\n            children: \"hhh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-col px-3 flex-1 overflow-x-scroll align-text-bottom \",\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-col px-3 my-1 flex-1 overflow-x-scroll align-text-bottom \",\n        children: [messages === null || messages === void 0 ? void 0 : messages.map((m, i) => /*#__PURE__*/_jsxDEV(Message, {\n          message: m\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 20\n        }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n          ref: ref,\n          className: \" sticky bottom-0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-10 w-11/12 mt-2  bottom-10 mt-auto  text-right bg-slate-400\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: sendMessage,\n          className: \"flex h-full\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchMessages,\n            children: \"image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: typingHandler,\n            className: \"w-full  fex flex-grow mx-3  rounded-2xl \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"rounded-xl bg-teal-400 p-2 mx-2\",\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chat, \"h58qAgSCbtupCss0NNaWCCC39ig=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/aswin/Desktop/Projects/chat-mern/chat-react/src/Components/ChatScreen/Chat.js"],"names":["axios","React","useEffect","useRef","useState","Message","ChatState","UpdateGroup","io","ENDPOINT","socket","selectedChatCompare","Chat","selectedChat","user","setSelectedChat","setGroupButton","groupButton","messages","setMessages","newMessage","setNewMessage","loading","setLoading","socketConnected","setSocketConnected","typingHandler","e","target","value","ref","scrollToBottom","current","scrollIntoView","behavior","fetchMessages","config","headers","Authorization","token","data","get","_id","error","console","log","sendMessage","preventDefault","post","content","chatId","emit","on","chatName","map","m","i"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react'\n\nimport Message from './Message'\nimport { ChatState } from '../../ChatProvideContext';\nimport UpdateGroup from './UpdateGroup';\nimport io from \"socket.io-client\";\n\nconst ENDPOINT=\"http://localhost:9000\"\nvar socket,selectedChatCompare\n\nfunction Chat() {\n    const { selectedChat,user ,setSelectedChat,setGroupButton,groupButton } = ChatState();\n    const [messages,setMessages]=useState([])\n    const [newMessage,setNewMessage]=useState('')\n    const [loading,setLoading]=useState(false)\n    const [socketConnected, setSocketConnected] = useState(false);\n   \n    const typingHandler = (e) => {\n        setNewMessage(e.target.value);\n    }\n    const ref = useRef()\n    const scrollToBottom = () => {\n        ref.current?.scrollIntoView({behavior: \"auto\"})\n      }\n    useEffect(() => {\n        scrollToBottom();\n    },[messages])\n    \n    const fetchMessages = async () => {\n        if (!selectedChat) return;\n    \n        try {\n          const config = {\n            headers: {\n              Authorization: `Bearer ${user.token}`,\n            },\n          };\n    \n          setLoading(true);\n    \n          const { data } = await axios.get(\n            `/message/${selectedChat._id}`,\n            config\n          );\n          setMessages(data);\n          setLoading(false);\n    \n        //   socket.emit(\"join chat\", selectedChat._id);\n        } catch (error) {\n          console.log('failed to load messages',error);\n        }\n      };\n    //   console.log(messages);\n     \n      const sendMessage = async (e) => {\n          e.preventDefault();\n        //   socket.emit(\"stop typing\", selectedChat._id);\n        console.log(newMessage);\n          try {\n            const config = {\n              headers: {\n                \"Content-type\": \"application/json\",\n                Authorization: `Bearer ${user.token}`,\n              },\n            };\n            setNewMessage(\"\");\n            const { data } = await axios.post(\n              '/message',\n              {\n                content: newMessage,\n                chatId: selectedChat,\n              },\n              config\n            );\n            // socket.emit(\"new message\", data);\n        \n            setMessages([...messages, data]);\n          } catch (error) {\n            console.log('failed to send message',error);\n        }\n      };\n\n      useEffect(() => {\n        fetchMessages();\n      }, [selectedChat]);\n        // if (!socketConnected) return;\n    \n        // if (!typing) {\n        //   setTyping(true);\n        //   socket.emit(\"typing\", selectedChat._id);\n        // }\n        // let lastTypingTime = new Date().getTime();\n        // var timerLength = 3000;\n        // setTimeout(() => {\n        //   var timeNow = new Date().getTime();\n        //   var timeDiff = timeNow - lastTypingTime;\n        //   if (timeDiff >= timerLength && typing) {\n        //     socket.emit(\"stop typing\", selectedChat._id);\n        //     setTyping(false);\n        //   }\n        // }, timerLength);\n      \n    useEffect(() => {\n      socket = io(ENDPOINT)\n      socket.emit(\"setup\",user)\n      socket.on(\"connection\",()=>setSocketConnected(true))\n    }, []);\n    \n\n    return (\n    <div className={`  sm:p-5 md:p-10 h-screen overflow-x-hidden z-30 md:flex-grow w-full max-w-screen-2xl  md:flex ${selectedChat?\"flex\":\"none\"} `}>\n        <div className=\"sm:rounded-3xl w-full z-40 p-3 relative flex flex-col bg-emerald-100 bg-opacity-90 h-full\">\n            <UpdateGroup/>\n            <div className=\" rounded-3xl  px-10 py-5 bg-white flex\">\n                <h1>{selectedChat.chatName}</h1>\n                <div className=\"ml-auto\">\n                    <button onClick={()=>setGroupButton(true)}>hhh</button>    \n                </div>\n            </div>\n\n            {loading?<div className=\"flex-col px-3 flex-1 overflow-x-scroll align-text-bottom \">loading...</div>\n            :\n            <div className=\"flex-col px-3 my-1 flex-1 overflow-x-scroll align-text-bottom \">                \n                {messages?.map((m,i)=>\n                   <Message message={m}/>\n                )}\n                <p ref={ref} className=\" sticky bottom-0\"></p>\n            </div>}\n\n            <div className=\"px-10 w-11/12 mt-2  bottom-10 mt-auto  text-right bg-slate-400\">\n                <form onSubmit={sendMessage} className=\"flex h-full\" >\n                    <button onClick={fetchMessages}>image</button>\n                    <input type='text' value={newMessage}  onChange={typingHandler}  className='w-full  fex flex-grow mx-3  rounded-2xl ' />\n                    <button type='submit'   className='rounded-xl bg-teal-400 p-2 mx-2'>send</button>\n                </form>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}